TODO
====
- ability to use tokenizer without parser

Questions
=========

grammar
- only allow grammar and tokens in definition (no character classes, literals, etc)?
- distinguish grammar from tokens in definitions? (ex: [token], <grammar>)
- token and grammar name clashes? (resolved with [], <> annotation?)


NOTES
========
- empty pattern with pipes (a|b|)

- definitions require LL(1) validation
	- Grammar G is LL(1) iff for every two productions of the form A -> a|b
		- FIRST(a) and FIRST(b) are disjoint
		- if epsilon is in FIRST(b) then FIRST(a) and FOLLOW(A) are disjoint (and vice versa)
		

Bookmarks
=========
Basics of Compiler Design / 2.9 Lexers and lexer generators / p. 46 


Constructing LL(1) Prediction Table
===================================
For each production A -> X in the grammar
 – For each terminal a in FIRST(A), set M[A,a] = A -> X
 – If X is in FIRST(a) then for each terminal b in FOLLOW(A), set M[A,b] = A -> X

